// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id        String   @id @default(uuid())
  name      String
  userId    String
  billboards Billboard[] @relation("StoreToBillboard")
  category Category[] @relation("StoreToCategory")
  size Size[] @relation("StoreToSize")
  color Color[] @relation("StoreToColor")
  products Product[] @relation("StoreToProduct")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Billboard{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToBillboard",fields: [storeId],references: [id])
  category Category[] 
  label String
  imageUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([storeId])

}
model Category{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToCategory",fields: [storeId],references: [id])
  billboardId String
  billboard Billboard @relation(fields: [billboardId],references: [id])
  products Product[] @relation("CategoryToProduct")
  name String 
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt  
  @@index([storeId])
  @@index([billboardId])
  

}
model Size{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToSize",fields: [storeId],references: [id])
  product Product[]
  name String
  value String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  @@index([storeId])
}
model Color{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToColor",fields: [storeId],references: [id])
  product Product[] 
  name String
  value String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  @@index([storeId])

}

model Product {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToProduct",fields: [storeId],references: [id])
  categoryId String
  category Category @relation("CategoryToProduct",fields: [categoryId],references: [id])
  name String
  price Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  sizeId String
  size Size @relation(fields: [sizeId],references: [id],onUpdate: Cascade)
  colorId String
  color Color @relation(fields: [colorId],references: [id],onUpdate: Cascade)
  images Image[]
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  @@index([storeId])
  @@index([categoryId])
  @@index([colorId])
  @@index([sizeId])

}
model Image{
  id String @id @default(uuid())
  productId String
  product Product @relation(fields: [productId],references: [id],onDelete: Cascade)
  url String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  @@index([productId])
}